# Workflow name displayed on GitHub Actions tab
name: ThinkAlike CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the main branch
  push:
    branches: [main]
    # Do not run workflow for changes solely in documentation files
    paths-ignore:
      - "**.md"
      - "docs/**"
      - "site/**" # Also ignore generated site files
  # Triggers the workflow on pull request events but only for the main branch
  pull_request:
    branches: [main]
    # Do not run workflow for changes solely in documentation files
    paths-ignore:
      - "**.md"
      - "docs/**"
      - "site/**" # Also ignore generated site files
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This job performs code linting
  lint:
    name: Lint Code
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4 # Use latest major version for security and features

      # Sets up a Python environment for use in actions
      - name: Set up Python
        uses: actions/setup-python@v5 # Use latest major version
        with:
          python-version: "3.10" # Specify the Python version your project uses
          cache: "pip" # Cache pip dependencies for faster builds
          cache-dependency-path: | # Cache based on requirements files
            **/requirements*.txt

      # Installs necessary linting tools
      - name: Install Python lint dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy # Added mypy for type checking

      # Runs the Python linters to check code style and quality
      - name: Run Python Linters
        run: |
          echo "Running Flake8..."
          # flake8 checks for style guide enforcement (PEP8) and simple errors
          # --count shows total errors, --max-line-length=100 sets line length
          # --show-source shows the problematic code line, --statistics provides counts per error code
          # Exclude migrations, venv, __pycache__, generated site, etc.
          flake8 . --count --max-line-length=100 --show-source --statistics --exclude=venv,__pycache__,site,docs/build,migrations
          echo "Running Black check..."
          # black checks if the code is formatted according to its opinionated style
          # --check doesn't modify files but exits with an error if changes are needed
          black . --check --line-length=100 --exclude=venv/__pycache__|site/|docs/build/|migrations/
          echo "Running isort check..."
          # isort checks if imports are sorted correctly
          # --check-only doesn't modify files but exits with an error if changes are needed
          isort . --check-only --profile black --line-length=100 --skip-glob=venv/* --skip-glob=__pycache__/* --skip-glob=site/* --skip-glob=docs/build/* --skip-glob=migrations/*
          # echo "Running mypy..." # Optional: Add type checking
          # mypy . --ignore-missing-imports # Adjust path and options as needed

      # Setup Node.js for frontend linting
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18" # Specify your Node.js version
          cache: "npm" # Cache npm dependencies
          cache-dependency-path: "frontend/package-lock.json" # Specify lock file path

      # Install frontend dependencies
      - name: Install Node dependencies (Frontend)
        # Only run if frontend directory and package-lock.json exist
        if: hashFiles('frontend/package-lock.json') != ''
        working-directory: ./frontend # Specify working directory
        run: npm ci # Use 'ci' for faster, reliable installs

      # Run frontend linters (ESLint, Prettier check)
      - name: Run Frontend Linters
        # Only run if frontend directory and package.json exist
        if: hashFiles('frontend/package.json') != ''
        working-directory: ./frontend
        run: |
          echo "Running ESLint..."
          # Check if lint script exists before running
          if npm run --silent lint; then npm run lint; else echo "No lint script found, skipping ESLint."; fi
          echo "Running Prettier check..."
          # Check if format:check script exists before running
          if npm run --silent format:check; then npm run format:check; else echo "No format:check script found, skipping Prettier."; fi

  # This job runs the backend tests
  test-backend:
    name: Test Backend (Python)
    # This job depends on the 'lint' job completing successfully
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        id: checkout # Give the checkout step an ID
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
          cache-dependency-path: |
            **/requirements*.txt

      # Installs testing tools and project dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov # Common Python testing tools
          # Install main project dependencies. Adjust paths if your requirements file is elsewhere.
          # Check if root requirements.txt exists
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Check if backend-specific requirements.txt exists
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
          # Install test-specific requirements if they exist
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          if [ -f backend/requirements-dev.txt ]; then pip install -r backend/requirements-dev.txt; fi

      # Runs the tests using pytest and generates coverage reports
      - name: Run Python tests with coverage
        run: |
          # Adjust paths if your tests or source code are in different directories
          # Example: pytest backend/tests --cov=backend ...
          # --cov specifies the package/directory to measure coverage for
          # --cov-report=xml generates an XML report (e.g., for Codecov)
          # --cov-report=term shows a summary in the terminal
          # Check if backend/tests directory exists before running pytest
          if [ -d "backend/tests" ]; then
            pytest --cov=backend --cov-report=xml --cov-report=term backend/tests
          else
            echo "backend/tests directory not found, skipping backend tests."
          fi

      # Optional step to upload coverage reports to a service like Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        # The token is usually optional for public repos on common CI providers
        # token: ${{ secrets.CODECOV_TOKEN }} # Requires setting a CODECOV_TOKEN secret if private repo or needed
        with:
          files: ./coverage.xml # Path to the generated coverage report
          fail_ci_if_error: true # Optional: Fail CI if Codecov upload fails
        # Only run on push to main or PRs to main to avoid uploading for every commit
        # Also check if coverage.xml was actually generated
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && hashFiles('./coverage.xml') != '')

      - name: Run Backend Tests
        if: hashFiles('backend/requirements.txt') != ''
        run: |
          cd backend
          pip install -r requirements.txt
          # Add backend test command here, e.g., pytest
          echo "Backend tests would run here"
        working-directory: ${{ github.workspace }}

  # This job runs the frontend tests
  test-frontend:
    name: Test Frontend (JS/TS)
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        id: checkout # Give the checkout step an ID
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: Install Node dependencies (Frontend)
        # Only run if frontend directory and package-lock.json exist
        if: hashFiles('frontend/package-lock.json') != ''
        working-directory: ./frontend
        run: npm ci

      - name: Run Frontend Lint
        if: hashFiles('frontend/package.json') != ''
        run: |
          cd frontend
          npm ci
          npm run lint
        working-directory: ${{ github.workspace }}

      - name: Run Frontend Tests
        if: hashFiles('frontend/package.json') != ''
        run: |
          cd frontend
          npm ci
          npm run test --silent # Removed --silent as it caused an error, adjust if needed for your test runner
        working-directory: ${{ github.workspace }}

      - name: Run frontend tests
        # Only run if frontend directory and package.json exist
        if: hashFiles('frontend/package.json') != ''
        working-directory: ./frontend
        run: npm test -- --coverage # Assumes a 'test' script, add --coverage flag if needed


      # Optional: Upload frontend coverage if generated
      # - name: Upload Frontend Coverage to Codecov
      #   uses: codecov/codecov-action@v4
      #   with:
      #     # token: ${{ secrets.CODECOV_TOKEN }}
      #     working-directory: ./frontend # Specify working directory for coverage report
      #     files: ./coverage/coverage-final.json # Adjust path based on your coverage reporter (e.g., lcov.info)
      #     fail_ci_if_error: true
      #   if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && hashFiles('./frontend/coverage/coverage-final.json') != '')
