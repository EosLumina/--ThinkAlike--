name: ThinkAlike CD

on:
  workflow_run:
    workflows: ["ThinkAlike CI"]
    branches: [main, develop]
    types:
      - completed

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'develop' }}
    steps:
      - name: Deploy to Staging
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/thinkalike
            docker-compose pull
            docker-compose up -d
            
      - name: Run Health Checks
        run: |
          # Wait for services to start
          sleep 30
          
          # Check if API is up
          curl --fail https://${{ secrets.STAGING_URL }}/api/v1/health || exit 1
          
          # Check if frontend is up
          curl --fail https://${{ secrets.STAGING_URL }} || exit 1
          
          echo "All health checks passed!"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    environment:
      name: production
      url: https://${{ secrets.PROD_URL }}
    steps:
      - name: Deploy to Production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /opt/thinkalike
            # Create backup before deployment
            docker-compose exec -T db pg_dump -U postgres thinkalike > backup_$(date +%Y%m%d_%H%M%S).sql
            
            # Deploy new version
            docker-compose pull
            docker-compose up -d
            
      - name: Run Health Checks
        run: |
          # Wait for services to start
          sleep 30
          
          # Check if API is up
          curl --fail https://${{ secrets.PROD_URL }}/api/v1/health || exit 1
          
          # Check if frontend is up
          curl --fail https://${{ secrets.PROD_URL }} || exit 1
          
          echo "All health checks passed!"
          
      - name: Create Deployment Status
        uses: actions/github-script@v6
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              auto_merge: false,
              required_contexts: []
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: 'https://${{ secrets.PROD_URL }}',
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: 'Deployment successful'
            });
