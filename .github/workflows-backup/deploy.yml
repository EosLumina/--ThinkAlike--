name: ThinkAlike Deploy

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - 'docs/**'
      - '**.md'
  workflow_dispatch:

jobs:
  init:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Install development versions of our custom modules
          pip install -e .
          
      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

  prepare-deployment:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    needs: init
    outputs:
      deployment_id: ${{ steps.create_deployment.outputs.deployment_id }}
    steps:
      - name: Create GitHub Deployment
        id: create_deployment
        uses: actions/github-script@v6
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}',
              auto_merge: false,
              required_contexts: []
            });
            console.log(`Created deployment: ${deployment.data.id}`);
            return deployment.data.id;

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: prepare-deployment
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v3
      
      - name: Set Deployment Status to In Progress
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.prepare-deployment.outputs.deployment_id }},
              state: 'in_progress'
            });
      
      - name: Deploy to Staging Environment
        uses: appleboy/ssh-action@master
        env:
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
          STAGING_USERNAME: ${{ secrets.STAGING_USERNAME }}
          STAGING_SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
        with:
          host: ${{ env.STAGING_HOST }}
          username: ${{ env.STAGING_USERNAME }}
          key: ${{ env.STAGING_SSH_KEY }}
          script: |
            cd /opt/thinkalike
            docker-compose pull
            docker-compose up -d
      
      - name: Set Deployment Status to Success
        if: success()
        uses: actions/github-script@v6
        env:
          STAGING_URL: ${{ secrets.STAGING_URL }}
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.prepare-deployment.outputs.deployment_id }},
              state: 'success',
              environment_url: 'https://' + process.env.STAGING_URL
            });
            
      - name: Set Deployment Status to Failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo, 
              deployment_id: ${{ needs.prepare-deployment.outputs.deployment_id }},
              state: 'failure'
            });

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: prepare-deployment
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: ${{ format('https://{0}', secrets.PROD_URL) }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Set Deployment Status to In Progress
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.prepare-deployment.outputs.deployment_id }},
              state: 'in_progress'
            });
      
      - name: Deploy to Production
        uses: appleboy/ssh-action@master
        env:
          PROD_HOST: ${{ secrets.PROD_HOST }}
          PROD_USERNAME: ${{ secrets.PROD_USERNAME }}
          PROD_SSH_KEY: ${{ secrets.PROD_SSH_KEY }}
        with:
          host: ${{ env.PROD_HOST }}
          username: ${{ env.PROD_USERNAME }}
          key: ${{ env.PROD_SSH_KEY }}
          script: |
            cd /opt/thinkalike
            docker-compose exec -T db pg_dump -U postgres thinkalike > backup_$(date +%Y%m%d_%H%M%S).sql
            docker-compose pull
            docker-compose up -d
      
      - name: Set Deployment Status to Success
        if: success()
        uses: actions/github-script@v6
        env:
          PROD_URL: ${{ secrets.PROD_URL }}
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.prepare-deployment.outputs.deployment_id }},
              state: 'success',
              environment_url: 'https://' + process.env.PROD_URL
            });
            
      - name: Set Deployment Status to Failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo, 
              deployment_id: ${{ needs.prepare-deployment.outputs.deployment_id }},
              state: 'failure'
            });
