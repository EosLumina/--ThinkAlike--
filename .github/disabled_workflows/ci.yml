name: ThinkAlike CI

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - '**.md'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - '**.md'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 # Updated from v3

      - name: Set up Python
        uses: actions/setup-python@v5 # Updated from v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          # Ensure requirements-dev.txt exists or adjust path/file name
          if [ -f backend/requirements-dev.txt ]; then pip install -r backend/requirements-dev.txt; else echo "backend/requirements-dev.txt not found"; exit 1; fi

      - name: Lint with flake8
        run: flake8 backend --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Set up Node.js
        uses: actions/setup-node@v4 # Updated from v3
        with:
          node-version: 16 # Consider updating Node version too (e.g., 18 or 20)
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Node.js dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Lint frontend code
        working-directory: ./frontend
        run: npm run lint

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4 # Updated from v3

      - name: Set up Python
        uses: actions/setup-python@v5 # Updated from v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          # Ensure requirements files exist or adjust paths/names
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; else echo "backend/requirements.txt not found"; exit 1; fi
          if [ -f backend/requirements-dev.txt ]; then pip install -r backend/requirements-dev.txt; else echo "backend/requirements-dev.txt not found"; exit 1; fi


      - name: Run backend tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          TESTING: true
        run: |
          # Ensure backend directory exists
          if [ -d "backend" ]; then
            cd backend
            pytest --cov=app tests/
          else
            echo "backend directory not found"
            exit 1
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4 # Updated from v3
        with:
          flags: backend
          # token: ${{ secrets.CODECOV_TOKEN }} # Add token if needed for private repo

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4 # Updated from v3

      - name: Set up Node.js
        uses: actions/setup-node@v4 # Updated from v3
        with:
          node-version: 16 # Consider updating Node version too (e.g., 18 or 20)
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Node.js dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test -- --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4 # Updated from v3
        with:
          flags: frontend
          # token: ${{ secrets.CODECOV_TOKEN }} # Add token if needed for private repo

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [lint, test-backend, test-frontend]
    steps:
      - uses: actions/checkout@v4 # Updated from v3

      - name: Run Bandit (Python)
        uses: jpetrucciani/bandit-check@master # Check if a newer version/alternative exists
        with:
          path: 'backend'
          bandit_flags: '-r -x backend/tests/'

      - name: Run npm audit
        working-directory: ./frontend
        run: npm audit --audit-level=high

  build:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: [security-scan]
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') }}
    steps:
      - uses: actions/checkout@v4 # Updated from v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # Updated from v2

      - name: Login to DockerHub
        uses: docker/login-action@v3 # Updated from v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend
        uses: docker/build-push-action@v5 # Updated from v4
        with:
          context: ./backend
          push: true
          tags: thinkalike/api:${{ github.sha }},thinkalike/api:latest
          cache-from: type=registry,ref=thinkalike/api:latest
          cache-to: type=inline

      - name: Build and push frontend
        uses: docker/build-push-action@v5 # Updated from v4
        with:
          context: ./frontend
          push: true
          tags: thinkalike/web:${{ github.sha }},thinkalike/web:latest
          cache-from: type=registry,ref=thinkalike/web:latest
          cache-to: type=inline
